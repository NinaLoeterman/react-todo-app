{"version":3,"sources":["components/todo_item/todo_item.jsx","components/todo_form/todo_form.jsx","components/todo/todo.jsx","App.js","serviceWorker.js","index.js"],"names":["ToDoItem","todo","toggle","submit","change","escape","favorite","edit","deleteItem","isDone","done","isFavorite","isEditing","className","onClick","onSubmit","e","autoFocus","type","defaultValue","value","onChange","onKeyDown","ToDoForm","props","state","todoValue","event","preventDefault","this","setState","target","showRefresh","todosList","length","handleInput","htmlFor","onChangeValue","placeholder","refresh","React","Component","TodoList","key","todos","favorites","keyCode","i","indexOf","newArr","forceUpdate","splice","favs","filter","item","nonFavs","sort","a","b","id","obj","doneList","todoList","map","push","deleteTodo","toggleToDo","toggleFavorite","onEditSubmit","onEscape","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.15853bff.chunk.js","sourcesContent":["import React from \"react\";\nimport {\n  IoMdTrash,\n  IoMdStar,\n  IoMdCreate,\n  IoIosRadioButtonOff,\n  IoMdCheckmarkCircle,\n} from \"react-icons/io\";\nimport \"./todo_item.css\"\n\nconst ToDoItem = ({ todo, toggle, submit, change, escape, favorite, edit, deleteItem }) => {\n  const isDone = todo.done;\n  const isFavorite = todo.favorite;\n  const isEditing = todo.edit;\n  return (\n    <li className={isEditing ? \"blue_bottom_border\" : \"\"}>\n        {isDone ? (\n        <IoMdCheckmarkCircle\n          className=\"icon blue\"\n          onClick={() => toggle(todo)}\n        />\n      ) : (\n        <IoIosRadioButtonOff\n          className=\"icon\"\n          onClick={() => toggle(todo)}\n        />\n      )}\n      {isEditing ? (\n        <form onSubmit={(e) => submit(e, todo)}>\n          <input\n            autoFocus\n            type=\"text\"\n            className=\"dark-input\"\n            defaultValue={todo.value}\n            onChange={(e) => change(e)}\n            onKeyDown={(e) => escape(e, todo)}\n          ></input>\n        </form>\n      ) : (\n        <span>{todo.value}</span>\n      )}\n      <div className=\"icon-wrapper\">\n        <IoMdCreate className={isEditing ? 'icon blue' : 'icon'} onClick={() => edit(todo)} />\n        <IoMdStar\n          className={isFavorite ? \"blue icon\" : \"icon\"}\n          onClick={() => favorite(todo)}\n        />\n        <IoMdTrash className=\"icon\" onClick={() => deleteItem(todo)} />\n      </div>\n    </li>\n  );\n}\n\nexport default ToDoItem;\n","import React from 'react';\nimport {\n  IoMdAdd, IoMdRefresh,\n} from \"react-icons/io\";\nimport './todo_form.css'\n\nclass ToDoForm extends React.Component {\n    constructor(props){\n        super(props)\n        this.state = {todoValue: ''}\n    }\n    onSubmit(event){\n        event.preventDefault()\n        this.setState({\n            todoValue: ''\n        })\n    }\n    onChangeValue(e) {\n        this.setState({ todoValue: e.target.value });\n      }\n    render() {\n        const showRefresh = this.props.todosList.length > 0;\n        return (\n        <form className=\"todo-form\" onSubmit={(event) => {this.props.handleInput(event); this.onSubmit(event)}}>\n          <label htmlFor=\"todo\" className=\"title\">\n            ToDo\n          </label>\n          <div className=\"input-div\">\n            <input\n              value={this.state.todoValue}\n              onChange={(e) => {this.props.change(e); this.onChangeValue(e)}}\n              type=\"text\"\n              className=\"main-input\"\n              placeholder=\"write it all down\"\n            ></input>\n            <button>\n              <IoMdAdd className=\"add-icon\" />\n            </button>\n            {showRefresh ? (<IoMdRefresh className=\"refresh\" onClick={() => this.props.refresh()}/>) : (<span></span>)}\n          </div>\n        </form>\n    )}\n}\n\nexport default ToDoForm","import React from \"react\";\nimport \"./styles.css\";\nimport ToDoItem from \"../todo_item/todo_item\";\nimport ToDoForm from \"../todo_form/todo_form\";\n\nclass TodoList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { value: \"\", key: 0, todos: [], favorites: [] };\n  }\n  onChangeValue(e) {\n    this.setState({ value: e.target.value });\n  }\n  onEscape(e, todo) {\n    if (e.keyCode === 27) this.edit(todo);\n  }\n  toggleToDo(todo) {\n    let i = this.state.todos.indexOf(todo);\n    let newArr = this.state.todos;\n    newArr[i].done = !newArr[i].done;\n    this.setState({\n      todos: newArr,\n    });\n    this.forceUpdate();\n  }\n  deleteTodo(todo) {\n    let i = this.state.todos.indexOf(todo);\n    let newArr = this.state.todos;\n    newArr.splice(i, 1);\n    this.setState({\n      todos: newArr,\n    });\n    this.forceUpdate();\n  }\n  edit(todo) {\n    let i = this.state.todos.indexOf(todo);\n    let newArr = this.state.todos;\n    newArr[i].edit = !newArr[i].edit;\n    this.setState({\n      todos: newArr,\n    });\n    this.forceUpdate();\n  }\n  onEditSubmit(e, todo) {\n    e.preventDefault();\n    let i = this.state.todos.indexOf(todo);\n    let newArr = this.state.todos;\n    newArr[i].edit = !newArr[i].edit;\n    newArr[i].value = this.state.value;\n    this.setState({\n      value: newArr,\n    });\n  }\n  refresh() {\n    this.setState({\n      todos: [],\n      favorites: [],\n    });\n  }\n  toggleFavorite(todo) {\n    let i = this.state.todos.indexOf(todo);\n    let newArr = this.state.todos;\n    newArr[i].favorite = !newArr[i].favorite;\n    let favs = newArr.filter((item) => item.favorite === true);\n    let nonFavs = newArr.filter((item) => item.favorite === false);\n    nonFavs.sort((a, b) => b.id - a.id);\n    this.setState({\n      favorites: [...favs],\n      todos: [...favs, ...nonFavs],\n    });\n  }\n  handleInput(e) {\n    e.preventDefault();\n    let obj = {\n      value: this.state.value,\n      done: false,\n      id: this.state.key,\n      favorite: false,\n      edit: false,\n    };\n    let nonFavs = this.state.todos.filter((item) => item.favorite === false);\n    this.setState((state) => ({\n      value: \"\",\n      todos: [...state.favorites, obj, ...nonFavs],\n      key: state.key + 1,\n    }));\n  }\n  render() {\n    let doneList = [];\n    let todoList = [];\n    this.state.todos.map((todo) =>\n      todo.done ? doneList.push(todo) : todoList.push(todo)\n    );\n    return (\n      <div className=\"app-wrapper\">\n        <div className=\"todoList\">\n          <ToDoForm\n            todosList={this.state.todos}\n            value={this.state.value}\n            change={(event) => this.onChangeValue(event)}\n            handleInput={(event) => this.handleInput(event)}\n            refresh={() => this.refresh()}\n          />\n          <ul className=\"todoUl\">\n            {todoList.map((todo) => (\n              <ToDoItem\n                key={todo.id}\n                todo={todo}\n                deleteItem={() => this.deleteTodo(todo)}\n                toggle={() => this.toggleToDo(todo)}\n                favorite={() => this.toggleFavorite(todo)}\n                edit={() => this.edit(todo)}\n                change={(event) => this.onChangeValue(event)}\n                submit={(e, todo) => this.onEditSubmit(e, todo)}\n                escape={(e) => this.onEscape(e, todo)}\n              />\n            ))}\n          </ul>\n        </div>\n        <div className=\"doneList\">\n          <h2 className={doneList.length > 0 ? \"title\" : \"title inactive\"}>\n            Done\n          </h2> \n          <ul className=\"doneUl\">\n            {doneList.map((todo) => (\n              <ToDoItem\n                key={todo.id}\n                todo={todo}\n                deleteItem={() => this.deleteTodo(todo)}\n                toggle={() => this.toggleToDo(todo)}\n                favorite={() => this.toggleFavorite(todo)}\n                edit={() => this.edit(todo)}\n                change={(e) => this.onChangeValue(e)}\n                submit={(e, todo) => this.onEditSubmit(e, todo)}\n                escape={(e) => this.onEscape(e, todo)}\n              />\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default TodoList;\n","import React from 'react';\nimport './App.css';\nimport TodoList from './components/todo/todo.jsx';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <TodoList></TodoList>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}